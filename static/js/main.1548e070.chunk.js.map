{"version":3,"sources":["components/Timer1/index.js","components/Timer1/Timer1.js","components/Timer2/index.js","components/Timer2/Timer2.js","App.js","serviceWorker.js","index.js"],"names":["Timer1","time","autoplay","step","useState","isOn1","setIsOn1","timer1","setTimer1","width1","setWidth1","useEffect","interval1","console","log","setInterval","clearInterval","className","role","aria-label","type","disabled","onClick","style","width","Timer2","isOn2","setIsOn2","timer2","setTimer2","width2","setWidth2","interval2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1548e070.chunk.js","sourcesContent":["import Timer1 from './Timer1'\r\n\r\nexport default Timer1;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Timer1.css';\r\n\r\n\r\nconst Timer1 = ({time, autoplay, step}) => {\r\n    const [isOn1, setIsOn1] = useState(autoplay); \r\n    const [timer1, setTimer1] = useState(time);\r\n    const [width1, setWidth1] = useState(1000);\r\n\r\n    const onReset1 = () => {\r\n        setIsOn1(false);\r\n        setTimer1(time);\r\n        setWidth1(1000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        let interval1;\r\n        if (isOn1 && timer1!==0) {\r\n          console.log(\"осталось времени: \" + timer1);\r\n          interval1 = setInterval(\r\n            () => {\r\n              setTimer1(timer1 => timer1 - step) || setWidth1(width1 => width1 - step*100)\r\n            },\r\n            1000,\r\n          );\r\n        }\r\n        else if(timer1 === 0){\r\n          console.log(\"время вышло\");\r\n        }\r\n        return () => clearInterval(interval1);\r\n    }, [isOn1, timer1, step]);\r\n\r\n\r\n\r\n    return (\r\n       <>\r\n      <div className=\"firstTimer\">\r\n      <br/>\r\n        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n          { (\r\n          <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={isOn1 === true} onClick={() => setIsOn1(true)}>\r\n            Start\r\n          </button> \r\n          )}\r\n        <br/>\r\n        { (\r\n        <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={isOn1 === false} onClick={() => setIsOn1(false)}>\r\n          Stop\r\n        </button>\r\n      )}\r\n      <br/>\r\n      <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={timer1 === time} onClick={onReset1}>\r\n        Reset\r\n      </button>\r\n      </div>\r\n      </div>\r\n      <div className=\"line1\" style={{width : width1+\"px\"}}>\r\n        <div className=\"textContent\"> \r\n          {timer1}\r\n        </div>\r\n      </div>\r\n    \r\n    </>\r\n    )\r\n}\r\n\r\nexport default Timer1\r\n","import Timer2 from './Timer2'\r\n\r\nexport default Timer2;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Timer2.css';\r\n\r\n\r\nconst Timer2 = ({time, autoplay, step}) => {\r\n    const [isOn2, setIsOn2] = useState(autoplay); \r\n    const [timer2, setTimer2] = useState(time);\r\n    const [width2, setWidth2] = useState(1000);\r\n   \r\n     useEffect(() => {\r\n        let interval2;\r\n        if (isOn2 && timer2!==0) {\r\n          console.log(\"осталось времени: \" + timer2);\r\n          interval2 = setInterval(\r\n            () => {\r\n              setTimer2(timer2 => timer2 - step ) || setWidth2(width2 => width2 - step*10)\r\n            },\r\n            1000,\r\n          );\r\n        }\r\n        else if(timer2 === 0){\r\n          console.log(\"время вышло\");      \r\n        }\r\n        return () => clearInterval(interval2) ;\r\n    }, [isOn2, timer2, step, width2]);\r\n\r\n    const onReset2 = () => {\r\n        setIsOn2(false);\r\n        setTimer2(time);\r\n        setWidth2(1000);\r\n    };\r\n\r\n    return (\r\n        <div>     \r\n        <div className=\"secondTimer\">\r\n        <br/>\r\n        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n        { (\r\n          <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={isOn2 === true} onClick={() => setIsOn2(true)}>\r\n            Start\r\n          </button> \r\n        )}\r\n        <br/>\r\n        { (\r\n          <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={isOn2 === false} onClick={() => setIsOn2(false)}>\r\n            Stop\r\n          </button>\r\n        )}\r\n        <br/>\r\n        <button type=\"button\" className=\"btn btn-primary btn-lg\" disabled={timer2 === time} onClick={onReset2}>\r\n          Reset\r\n        </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"line2\" style={{width : width2+\"px\"}} >\r\n        <div className=\"textContent\" >\r\n          {timer2}\r\n        </div>\r\n      </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer2\r\n","import React from 'react';\nimport Timer1 from './components/Timer1';\nimport Timer2 from './components/Timer2';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n   \n     <div className=\"app\">\n        <Timer1 time={10} autoplay={false} step={1}/> \n        <Timer2 time={100} autoplay step={2}/>\n     </div>  \n    \n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}